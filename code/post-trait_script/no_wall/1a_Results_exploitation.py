import h5py
import math
import numpy as np
import matplotlib.pyplot as plt
import os.path
from os import path
from mpl_toolkits.mplot3d import Axes3D
from collections import Counter
from statistics import mode
"""
This script will open one by one:
-Flow_height.txt and draw comparaison graphs of flow_height and profil_compacity
-profil_Vx .txt and draw comparaison graphs of profil Vx and flow_rate

"""

#simulation attibute:
grain_size       = 0.001
ground_thickness = 10 * grain_size
ground_y_shift   = 0.09
y0               = - ground_thickness - ground_y_shift

hstep = 1e-4
"""
num_of_grains = input('Please enter num_of_grains  = ')
angle    = input('Please enter inclination [16°,32°](step=2°)  = ')
ref      = input('Please choose the fixed attribute to take out graphs results (selon e or mu ?) : ')
t_graphs = np.float64(input('Please enter time to profil_compacity and profil_Vx graphs ([0.,3.],dt=0.5): t = '))
"""
num_of_grains 		 = 30000
x_position_from_gate = 700
angle    = 20
ref      = 'mu'
t_graphs = 3

# ordre : e-mu-angle											
e_init = 0.0
e_end  = 0.5
d_e    = 0.25
e = np.arange(e_init,e_end+d_e,d_e) 

mu_init = 0.3
mu_end  = 0.7
d_mu 	= 0.2
mu = np.arange(mu_init,mu_end+d_mu,d_mu)


print('e = ', e)
print('mu = ',mu)
print('angle = ',angle)




if (ref=='e'):
	flow_height_fig, h_graphs       = plt.subplots(1,len(e),figsize=(14, 6), sharey=True)
	profil_com_fig, com_graphs      = plt.subplots(2,len(e),figsize=(14, 6), sharey=True)
	inter_com_fig, inter_com_graphs = plt.subplots(2,len(e),figsize=(14, 6), sharey=True)
	profil_vx_fig, vx_graphs        = plt.subplots(2,len(e),figsize=(14, 6), sharey=True)
	profil_vx_fig_retr, vx_graphs_retr = plt.subplots(2,len(e),figsize=(14, 6), sharey=True)
	'''
	wbound = -0.1
	ebound = 3.1
	sbound = -0.1
	nbound = 35.1
	plt.xlim(wbound, ebound)
	plt.ylim(sbound, nbound)
	'''
	flow_rate_fig, flow_rate_graphs = plt.subplots(2,len(e),figsize=(14, 6), sharey=True)
	integration_fig, integration_graphs = plt.subplots(2,len(e),figsize=(14, 6), sharey=True)
	'''
	wbound = -0.1
	ebound = 3.1
	sbound = -0.1
	nbound = 70.1
	plt.xlim(wbound, ebound)
	plt.ylim(sbound, nbound)
	'''
	# we check if exist and open all files .txt one by one and take out graphs results
	for i_e in range(len(e)):
		for i_mu in range(len(mu)):
			
			"""
			open flow_height.txt and take out graphs:
			- compare flow_height
			- compare profil_compacity instantaneous and time averaged
			"""
			flow_height_input = 'flow_height_{}d_N-{}-e-{}-mu-{}-angle-{}.txt'.format(int(x_position_from_gate),int(num_of_grains),str(e[i_e]),str(mu[i_mu]),angle)
			if (path.exists(flow_height_input)==True):
				f_h 	   	= open(flow_height_input,'r')
				data_h 		= f_h.readlines()
				
				grain_size  = float(data_h[3])
				hstep		= float(data_h[5])
				porosity	= float(data_h[7])
				num_grains 	= float(data_h[9])
				tank_with	= float(data_h[11])
				x_position_from_gate = float(data_h[13])

				#filter data_h (attention line in txt begin at 1 while data_h begin at 0)
				t  = np.array(data_h[15][1:-2].split(),dtype=np.float64)
				dt = t[1]-t[0]

				h  = np.array(data_h[34][1:-2].split(','),dtype=np.float64)

				h_time_averaged      = np.array(data_h[39][1:-2].split(','),dtype=np.float64)
				h_time_average_std   = np.array(data_h[42][1:-2].split(','),dtype=np.float64)
				h_compacity_averaged = np.array(data_h[26][1:-2].split(','),dtype=np.float64)

				profil_compacity_100steps_averaged = data_h[20][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				profil_compacity_100steps_averaged = [p.split(', ') for p in profil_compacity_100steps_averaged] #split string profil_com to list of string
				profil_compacity_100steps_averaged = [[np.float64(x) for x in y] for y in profil_compacity_100steps_averaged]# convert each string to float value

				profil_compacity_100steps_std = data_h[23][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				profil_compacity_100steps_std = [p.split(', ') for p in profil_compacity_100steps_std] #split string profil_com to list of string
				profil_compacity_100steps_std = [[np.float64(x) for x in y] for y in profil_compacity_100steps_std]# convert each string to float value

				profil_density_instantaneous = data_h[31][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				profil_density_instantaneous = [p.split(', ') for p in profil_density_instantaneous] #split string profil_com to list of string
				profil_density_instantaneous = [[np.float64(x)*0.5 for x in y] for y in profil_density_instantaneous]# convert each string to float value
				
				#flow_height graphs
				flow_height_fig.suptitle('Evolution of Flow_height at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				h_graphs[i_e].plot(t,h,'o-',label='h_instantaneous-mu-{}'.format(mu[i_mu]))
				#h_graphs[i_e].plot(t+h_shift,h_compacity_averaged,'o--',label='h_compacity_averaged-mu-{}'.format(mu[i_mu]))
				h_graphs[i_e].errorbar(t,h_time_averaged,h_time_average_std,label='h_time_average-mu-{}'.format(mu[i_mu]))
				h_graphs[i_e].legend()
				h_graphs[i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				h_graphs[i_e].set_xlabel('time t(s)')
				h_graphs[i_e].set_ylabel('y/d')
				
				#Profil_compacity graphs
				index_com 		= np.searchsorted(t,t_graphs)
				#instantaneous
				profil_com_inst = profil_density_instantaneous[index_com]
				profil_com_fig.suptitle('Profil_compacity instantaneous and time-averaged 100steps with  x ={x_pos}, t = {t_g}, ang={a}'.format(x_pos= x_position_from_gate,t_g=t_graphs,a=angle),fontsize=15)
				com_graphs[0,i_e].plot(profil_com_inst,np.arange(0,len(profil_com_inst),1),'-o',label = ' com-mu-{}'.format(mu[i_mu]))
				com_graphs[0,i_e].legend()
				com_graphs[0,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				com_graphs[0,i_e].set_xlabel('Fraction_volume')
				com_graphs[0,i_e].set_ylabel('y/d')	

				#100steps_time_averages
				profil_com_av 	  = profil_compacity_100steps_averaged[index_com]
				profil_com_av_std = profil_compacity_100steps_std[index_com]
				#print(len(profil_com_av))
				#print(len(profil_com_av_std))
				com_graphs[1,i_e].plot(profil_com_av,np.arange(0,len(profil_com_av),1),'-o',label = ' com-mu-{}'.format(mu[i_mu]))
				com_graphs[1,i_e].legend()
				com_graphs[1,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				com_graphs[1,i_e].set_xlabel('Fraction_volume')
				com_graphs[1,i_e].set_ylabel('y/d')

				#Intergation profil_compacity
				#instantaneous
				inter_com_inst = []
				for i in range(len(profil_density_instantaneous)):
					inter_inst = np.mean(profil_density_instantaneous[i])/(h[i]*grain_size)
					inter_com_inst.append(inter_inst)
                #time-averaged
				inter_com_time_ave = []
				for i in range(len(profil_compacity_100steps_averaged)):
					inter_inst = np.mean(profil_compacity_100steps_averaged[i])/(h_time_averaged[i]*grain_size)
					inter_com_time_ave.append(inter_inst)

                #Intergration Compacity/h graphs
				#instantaneous
				inter_com_fig.suptitle('Evolution of integration of Compacity/h instantaneous and time-averaged at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				inter_com_graphs[0,i_e].plot(t,inter_com_inst,'o-',label='inter_Vx/h_inst-mu-{}'.format(mu[i_mu]))
				inter_com_graphs[0,i_e].legend()
				inter_com_graphs[0,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				inter_com_graphs[0,i_e].set_xlabel('time t(s)')
				inter_com_graphs[0,i_e].set_ylabel('Fraction_volume/h')

				#time averaged
				inter_com_graphs[1,i_e].plot(t,inter_com_time_ave,'o-',label='inter_Vx/h_av-mu-{}'.format(mu[i_mu]))
				inter_com_graphs[1,i_e].legend()
				inter_com_graphs[1,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				inter_com_graphs[1,i_e].set_xlabel('time t(s)')
				inter_com_graphs[1,i_e].set_ylabel('Fraction_volume/h')

			else:
				print('File ',flow_height_input,' does not exists')

			"""
			open Provil_vx.txt and take out results:
			- compare profil_Vx instantaenous and time averaged
			- compare profil_Vx_retrenched instantaenous and time averaged
			- compare flow_rate instantaneous and time averaged	
			"""
			profil_vx_input = 'Profil_Vxy_{}d_N-{}-e-{}-mu-{}-angle-{}.txt'.format(int(x_position_from_gate),str(num_of_grains),str(e[i_e]),str(mu[i_mu]),angle)
			if (path.exists(profil_vx_input)==True):
				f_vx 	   	= open(profil_vx_input,'r')
				data_vx	 	= f_vx.readlines()

				x_position_from_gate = float(data_vx[7])

				#filter data_h (attention line in txt begin at 1 while data_h begin at 0)
				t  = np.array(data_vx[9][1:-2].split(','),dtype=np.float64)
				dt = t[1]-t[0]

				Vx_profil_100steps_averaged = data_vx[24][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				Vx_profil_100steps_averaged = [p.split(', ') for p in Vx_profil_100steps_averaged] #split string profil_com to list of string
				Vx_profil_100steps_averaged = [[np.float64(x) for x in y] for y in Vx_profil_100steps_averaged]# convert each string to float value

				Vx_profil_100steps_std = data_vx[27][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				Vx_profil_100steps_std = [p.split(', ') for p in Vx_profil_100steps_std] #split string profil_com to list of string
				Vx_profil_100steps_std = [[np.float64(x) for x in y] for y in Vx_profil_100steps_std]# convert each string to float value

				Vx_profil_instantaneous = data_vx[36][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				Vx_profil_instantaneous = [p.split(', ') for p in Vx_profil_instantaneous] #split string profil_com to list of string
				Vx_profil_instantaneous = [[np.float64(x)*0.5 for x in y] for y in Vx_profil_instantaneous]# convert each string to float value

				flow_rate_time_averaged 	 = np.array(data_vx[30][1:-2].split(','),dtype=np.float64)
				Vx_integration_time_averaged = np.array(data_vx[33][1:-2].split(','),dtype=np.float64)
				
				flow_rate_instantaneous 	 = np.array(data_vx[39][1:-2].split(','),dtype=np.float64)*0.5
				Vx_integration_instantaneous = np.array(data_vx[42][1:-2].split(','),dtype=np.float64)*0.5
				
				#Profil_Vx graphs
				index_com 		  = np.searchsorted(t,t_graphs)
				#instantaneous
				profil_vx_inst 	  = Vx_profil_instantaneous[index_com]
				profil_vx_fig.suptitle('Profil_Vx instantaneous and time-averaged 100steps with  x ={x_pos}, t = {t_g}, ang={a}'.format(x_pos= x_position_from_gate,t_g=t_graphs,a=angle),fontsize=15)
				vx_graphs[0,i_e].plot(profil_vx_inst,np.arange(0,len(profil_vx_inst),1),'-o',label = ' com-mu-{}'.format(mu[i_mu]))
				vx_graphs[0,i_e].legend()
				vx_graphs[0,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				vx_graphs[0,i_e].set_xlabel('Vx(m/s)')
				vx_graphs[0,i_e].set_ylabel('y/d')
				
				#time averaged
				profil_vx_av 	  = Vx_profil_100steps_averaged[index_com]
				profil_com_av_std = Vx_profil_100steps_std[index_com]
				vx_graphs[1,i_e].plot(profil_vx_av,np.arange(0,len(profil_vx_av),1),'-o',label = ' com-mu-{}'.format(mu[i_mu]))
				vx_graphs[1,i_e].legend()
				vx_graphs[1,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				vx_graphs[1,i_e].set_xlabel('Vx(m/s)')
				vx_graphs[1,i_e].set_ylabel('y/d')

				#Profil_Vx graphs_retranched (tous moins Vx(y=0))
				#instantaneous
				profil_vx_inst_retr = profil_vx_inst-profil_vx_inst[0]
				profil_vx_fig_retr.suptitle('Profil_Vx instantaneous and time-averaged retrenched 100steps with  x ={x_pos}, t = {t_g}, ang={a}'.format(x_pos= x_position_from_gate,t_g=t_graphs,a=angle),fontsize=15)
				vx_graphs_retr[0,i_e].plot(profil_vx_inst_retr,np.arange(0,len(profil_vx_inst_retr),1),'-o',label = ' com-mu-{}'.format(mu[i_mu]))
				vx_graphs_retr[0,i_e].legend()
				vx_graphs_retr[0,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				vx_graphs_retr[0,i_e].set_xlabel('Vx(m/s)')
				vx_graphs_retr[0,i_e].set_ylabel('y/d')
				
				#time averaged
				profil_vx_av_retr = profil_vx_av-profil_vx_av[0]
				vx_graphs_retr[1,i_e].plot(profil_vx_av_retr,np.arange(0,len(profil_vx_av_retr),1),'-o',label = ' com-mu-{}'.format(mu[i_mu]))
				vx_graphs_retr[1,i_e].legend()
				vx_graphs_retr[1,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				vx_graphs_retr[1,i_e].set_xlabel('Vx(m/s)')
				vx_graphs_retr[1,i_e].set_ylabel('y/d')

				#Flow_rate graphs
				#instantaneous
				flow_rate_fig.suptitle('Evolution of Flow_rate instantaneous and time-averaged at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				flow_rate_graphs[0,i_e].plot(t,flow_rate_instantaneous,'o-',label='flow_rate_inst-mu-{}'.format(mu[i_mu]))
				flow_rate_graphs[0,i_e].legend()
				flow_rate_graphs[0,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				flow_rate_graphs[0,i_e].set_xlabel('time t(s)')
				flow_rate_graphs[0,i_e].set_ylabel('m3/s')

				#time averaged
				flow_rate_graphs[1,i_e].plot(t,flow_rate_time_averaged,'o-',label='flow_rate_av-mu-{}'.format(mu[i_mu]))
				flow_rate_graphs[1,i_e].legend()
				flow_rate_graphs[1,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				flow_rate_graphs[1,i_e].set_xlabel('time t(s)')
				flow_rate_graphs[1,i_e].set_ylabel('m3/s')
				f_vx.close()

				#Intergration Vx/h graphs
				#instantaneous
				integration_fig.suptitle('Evolution of integration Vx/h instantaneous and time-averaged at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				integration_graphs[0,i_e].plot(t,Vx_integration_instantaneous,'o-',label='inter_Vx/h_inst-mu-{}'.format(mu[i_mu]))
				integration_graphs[0,i_e].legend()
				integration_graphs[0,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				integration_graphs[0,i_e].set_xlabel('time t(s)')
				integration_graphs[0,i_e].set_ylabel('m3/s')

				#time averaged
				integration_graphs[1,i_e].plot(t,Vx_integration_time_averaged,'o-',label='inter_Vx/h_av-mu-{}'.format(mu[i_mu]))
				integration_graphs[1,i_e].legend()
				integration_graphs[1,i_e].set_title('e = '+str(e[i_e]),fontsize=10)
				integration_graphs[1,i_e].set_xlabel('time t(s)')
				integration_graphs[1,i_e].set_ylabel('m3/s')
				f_vx.close()


			else:
				print('File ',profil_vx_input,' does not exists')
	plt.show()

elif (ref=='mu'):
	flow_height_fig, h_graphs       = plt.subplots(1,len(mu),figsize=(14, 6), sharey=True)
	profil_com_fig, com_graphs      = plt.subplots(2,len(mu),figsize=(14, 6), sharey=True)
	inter_com_fig, inter_com_graphs = plt.subplots(2,len(mu),figsize=(14, 6), sharey=True)
	profil_vx_fig, vx_graphs        = plt.subplots(2,len(mu),figsize=(14, 6), sharey=True)
	profil_vx_fig_retr, vx_graphs_retr = plt.subplots(2,len(mu),figsize=(14, 6), sharey=True)
	'''
	wbound = -0.1
	ebound = 3.1
	sbound = -0.1
	nbound = 35.1
	plt.xlim(wbound, ebound)
	plt.ylim(sbound, nbound)
	'''
	flow_rate_fig, flow_rate_graphs = plt.subplots(2,len(mu),figsize=(14, 6), sharey=True)
	integration_fig, integration_graphs = plt.subplots(2,len(mu),figsize=(14, 6), sharey=True)
	'''
	wbound = -0.1
	ebound = 3.1
	sbound = -0.1
	nbound = 70.1
	plt.xlim(wbound, ebound)
	plt.ylim(sbound, nbound)
	'''

	# we check if exist and open all files .txt one by one and take out graphs results
	for i_mu in range(len(mu)):
		for i_e in range(len(e)):
			
			"""
			open flow_height.txt and take out graphs:
			- compare flow_height
			- compare profil_compacity instantaneous and time averaged
			"""
			flow_height_input = 'flow_height_{}d_N-{}-e-{}-mu-{}-angle-{}.txt'.format(int(x_position_from_gate),int(num_of_grains),str(e[i_e]),str(mu[i_mu]),angle)
			if (path.exists(flow_height_input)==True):
				f_h 	   	= open(flow_height_input,'r')
				data_h 		= f_h.readlines()
				
				grain_size  = float(data_h[3])
				hstep		= float(data_h[5])
				porosity	= float(data_h[7])
				num_grains 	= float(data_h[9])
				tank_with	= float(data_h[11])
				x_position_from_gate = float(data_h[13])

				#filter data_h (attention line in txt begin at 1 while data_h begin at 0)
				t  = np.array(data_h[15][1:-2].split(),dtype=np.float64)
				dt = t[1]-t[0]

				h  = np.array(data_h[34][1:-2].split(','),dtype=np.float64)

				h_time_averaged      = np.array(data_h[39][1:-2].split(','),dtype=np.float64)
				h_time_average_std   = np.array(data_h[42][1:-2].split(','),dtype=np.float64)
				h_compacity_averaged = np.array(data_h[26][1:-2].split(','),dtype=np.float64)

				profil_compacity_100steps_averaged = data_h[20][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				profil_compacity_100steps_averaged = [p.split(', ') for p in profil_compacity_100steps_averaged] #split string profil_com to list of string
				profil_compacity_100steps_averaged = [[np.float64(x) for x in y] for y in profil_compacity_100steps_averaged]# convert each string to float value

				profil_compacity_100steps_std = data_h[23][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				profil_compacity_100steps_std = [p.split(', ') for p in profil_compacity_100steps_std] #split string profil_com to list of string
				profil_compacity_100steps_std = [[np.float64(x) for x in y] for y in profil_compacity_100steps_std]# convert each string to float value

				profil_density_instantaneous = data_h[31][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				profil_density_instantaneous = [p.split(', ') for p in profil_density_instantaneous] #split string profil_com to list of string
				profil_density_instantaneous = [[np.float64(x)*0.5 for x in y] for y in profil_density_instantaneous]# convert each string to float value
				
				#flow_height graphs
				flow_height_fig.suptitle('Evolution of Flow_height at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				h_graphs[i_mu].plot(t,h,'o-',label='h_instantaneous-e-{}'.format(e[i_e]))
				#h_graphs[i_mu].plot(t+h_shift,h_compacity_averaged,'o--',label='h_compacity_averaged-mu-{}'.format(mu[i_mu]))
				h_graphs[i_mu].errorbar(t,h_time_averaged,h_time_average_std,label='h_time_average-e-{}'.format(e[i_e]))
				h_graphs[i_mu].legend()
				h_graphs[i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				h_graphs[i_mu].set_xlabel('time t(s)')
				h_graphs[i_mu].set_ylabel('y/d')
	
				#Profil_compacity graphs
				index_com 		= np.searchsorted(t,t_graphs)
				#instantaneous
				profil_com_inst = profil_density_instantaneous[index_com]
				profil_com_fig.suptitle('Profil_compacity instantaneous and time-averaged 100steps with  x ={x_pos}, t = {t_g}, ang={a}'.format(x_pos= x_position_from_gate,t_g=t_graphs,a=angle),fontsize=15)
				com_graphs[0,i_mu].plot(profil_com_inst,np.arange(0,len(profil_com_inst),1),'-o',label = ' com-e-{}'.format(e[i_e]))
				com_graphs[0,i_mu].legend()
				com_graphs[0,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				com_graphs[0,i_mu].set_xlabel('Fraction_volume')
				com_graphs[0,i_mu].set_ylabel('y/d')	

				#100steps_time_averages
				profil_com_av 	  = profil_compacity_100steps_averaged[index_com]
				profil_com_av_std = profil_compacity_100steps_std[index_com]
				#print(len(profil_com_av))
				#print(len(profil_com_av_std))
				com_graphs[1,i_mu].plot(profil_com_av,np.arange(0,len(profil_com_av),1),'-o',label = ' com-e-{}'.format(e[i_e]))
				com_graphs[1,i_mu].legend()
				com_graphs[1,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				com_graphs[1,i_mu].set_xlabel('Fraction_volume')
				com_graphs[1,i_mu].set_ylabel('y/d')
				
				#Intergation profil_compacity
				#instantaneous
				inter_com_inst = []
				for i in range(len(profil_density_instantaneous)):
					inter_inst = np.mean(profil_density_instantaneous[i])/(h[i]*grain_size)
					inter_com_inst.append(inter_inst)
                #time-averaged
				inter_com_time_ave = []
				for i in range(len(profil_compacity_100steps_averaged)):
					inter_inst = np.mean(profil_compacity_100steps_averaged[i])/(h_time_averaged[i]*grain_size)
					inter_com_time_ave.append(inter_inst)

                #Intergration Compacity/h graphs
				#instantaneous
				inter_com_fig.suptitle('Evolution of integration of Compacity/h instantaneous and time-averaged at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				inter_com_graphs[0,i_mu].plot(t,inter_com_inst,'o-',label='inter_com/h_inst-mu-{}'.format(e[i_e]))
				inter_com_graphs[0,i_mu].legend()
				inter_com_graphs[0,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				inter_com_graphs[0,i_mu].set_xlabel('time t(s)')
				inter_com_graphs[0,i_mu].set_ylabel('Fraction_volume/h')

				#time averaged
				inter_com_graphs[1,i_mu].plot(t,inter_com_time_ave,'o-',label='inter_com/h_av-mu-{}'.format(e[i_e]))
				inter_com_graphs[1,i_mu].legend()
				inter_com_graphs[1,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				inter_com_graphs[1,i_mu].set_xlabel('time t(s)')
				inter_com_graphs[1,i_mu].set_ylabel('Fraction_volume/h')
			
			else:
				print('File ',flow_height_input,' does not exists')

			"""
			open Provil_vx.txt and take out results:
			- compare profil_Vx instantaenous and time averaged
			- compare profil_Vx_retrenched instantaenous and time averaged
			- compare flow_rate instantaneous and time averaged	
			"""
			profil_vx_input = 'Profil_Vxy_{}d_N-{}-e-{}-mu-{}-angle-{}.txt'.format(int(x_position_from_gate),int(num_of_grains),str(e[i_e]),str(mu[i_mu]),angle)
			if (path.exists(profil_vx_input)==True):
				f_vx 	   	= open(profil_vx_input,'r')
				data_vx	 	= f_vx.readlines()

				x_position_from_gate = float(data_vx[7])

				#filter data_h (attention line in txt begin at 1 while data_h begin at 0)
				t  = np.array(data_vx[9][1:-2].split(','),dtype=np.float64)
				dt = t[1]-t[0]

				Vx_profil_100steps_averaged = data_vx[24][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				Vx_profil_100steps_averaged = [p.split(', ') for p in Vx_profil_100steps_averaged] #split string profil_com to list of string
				Vx_profil_100steps_averaged = [[np.float64(x) for x in y] for y in Vx_profil_100steps_averaged]# convert each string to float value

				Vx_profil_100steps_std = data_vx[27][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				Vx_profil_100steps_std = [p.split(', ') for p in Vx_profil_100steps_std] #split string profil_com to list of string
				Vx_profil_100steps_std = [[np.float64(x) for x in y] for y in Vx_profil_100steps_std]# convert each string to float value

				Vx_profil_instantaneous = data_vx[36][2:-3].split('], [') #enlever les [] aux 2 bouts et split to 1d list (each string = 1 profil_compacity at each 0.5s)
				Vx_profil_instantaneous = [p.split(', ') for p in Vx_profil_instantaneous] #split string profil_com to list of string
				Vx_profil_instantaneous = [[np.float64(x)*0.5 for x in y] for y in Vx_profil_instantaneous]# convert each string to float value

				flow_rate_time_averaged 	 = np.array(data_vx[30][1:-2].split(','),dtype=np.float64)
				Vx_integration_time_averaged = np.array(data_vx[33][1:-2].split(','),dtype=np.float64)
				
				flow_rate_instantaneous 	 = np.array(data_vx[39][1:-2].split(','),dtype=np.float64)*0.5
				Vx_integration_instantaneous = np.array(data_vx[42][1:-2].split(','),dtype=np.float64)*0.5
				
				#Profil_Vx graphs
				index_com 		  = np.searchsorted(t,t_graphs)
				#instantaneous
				profil_vx_inst 	  = Vx_profil_instantaneous[index_com]
				profil_vx_fig.suptitle('Profil_Vx instantaneous and time-averaged 100steps with  x ={x_pos}, t = {t_g}, ang={a}'.format(x_pos= x_position_from_gate,t_g=t_graphs,a=angle),fontsize=15)
				vx_graphs[0,i_mu].plot(profil_vx_inst,np.arange(0,len(profil_vx_inst),1),'-o',label = ' com-e-{}'.format(e[i_e]))
				vx_graphs[0,i_mu].legend()
				vx_graphs[0,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				vx_graphs[0,i_mu].set_xlabel('Vx(m/s)')
				vx_graphs[0,i_mu].set_ylabel('y/d')
				
				#time averaged
				profil_vx_av 	  = Vx_profil_100steps_averaged[index_com]
				profil_com_av_std = Vx_profil_100steps_std[index_com]
				vx_graphs[1,i_mu].plot(profil_vx_av,np.arange(0,len(profil_vx_av),1),'-o',label = ' com-e-{}'.format(e[i_e]))
				vx_graphs[1,i_mu].legend()
				vx_graphs[1,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				vx_graphs[1,i_mu].set_xlabel('Vx(m/s)')
				vx_graphs[1,i_mu].set_ylabel('y/d')

				#Profil_Vx graphs_retranched (tous moins Vx(y=0))
				#instantaneous
				profil_vx_inst_retr = profil_vx_inst-profil_vx_inst[0]
				profil_vx_fig_retr.suptitle('Profil_Vx instantaneous and time-averaged retrenched 100steps with  x ={x_pos}, t = {t_g}, ang={a}'.format(x_pos= x_position_from_gate,t_g=t_graphs,a=angle),fontsize=15)
				vx_graphs_retr[0,i_mu].plot(profil_vx_inst_retr,np.arange(0,len(profil_vx_inst_retr),1),'-o',label = ' com-e-{}'.format(e[i_e]))
				vx_graphs_retr[0,i_mu].legend()
				vx_graphs_retr[0,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				vx_graphs_retr[0,i_mu].set_xlabel('Vx(m/s)')
				vx_graphs_retr[0,i_mu].set_ylabel('y/d')
				
				#time averaged
				profil_vx_av_retr = profil_vx_av-profil_vx_av[0]
				vx_graphs_retr[1,i_mu].plot(profil_vx_av_retr,np.arange(0,len(profil_vx_av_retr),1),'-o',label = ' com-e-{}'.format(e[i_e]))
				vx_graphs_retr[1,i_mu].legend()
				vx_graphs_retr[1,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				vx_graphs_retr[1,i_mu].set_xlabel('Vx(m/s)')
				vx_graphs_retr[1,i_mu].set_ylabel('y/d')

				#Flow_rate graphs
				#instantaneous
				flow_rate_fig.suptitle('Evolution of Flow_rate instantaneous and time-averaged at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				flow_rate_graphs[0,i_mu].plot(t,flow_rate_instantaneous,'o-',label='flow_rate_inst-e-{}'.format(e[i_e]))
				flow_rate_graphs[0,i_mu].legend()
				flow_rate_graphs[0,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				flow_rate_graphs[0,i_mu].set_xlabel('time t(s)')
				flow_rate_graphs[0,i_mu].set_ylabel('m3/s')

				#time averaged
				flow_rate_graphs[1,i_mu].plot(t,flow_rate_time_averaged,'o-',label='flow_rate_av-e-{}'.format(e[i_e]))
				flow_rate_graphs[1,i_mu].legend()
				flow_rate_graphs[1,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				flow_rate_graphs[1,i_mu].set_xlabel('time t(s)')
				flow_rate_graphs[1,i_mu].set_ylabel('m3/s')
				f_vx.close()

				#Intergration Vx/h graphs
				#instantaneous
				integration_fig.suptitle('Evolution of integration Vx/h instantaneous and time-averaged at x ={x_pos}, dt = {dt}, ang={a}'.format(x_pos= x_position_from_gate,dt=dt,a=angle),fontsize=15)
				integration_graphs[0,i_mu].plot(t,Vx_integration_instantaneous,'o-',label='inter_Vx/h_inst-e-{}'.format(e[i_e]))
				integration_graphs[0,i_mu].legend()
				integration_graphs[0,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				integration_graphs[0,i_mu].set_xlabel('time t(s)')
				integration_graphs[0,i_mu].set_ylabel('m3/s')

				#time averaged
				integration_graphs[1,i_mu].plot(t,Vx_integration_time_averaged,'o-',label='inter_Vx/h_av-e-{}'.format(e[i_e]))
				integration_graphs[1,i_mu].legend()
				integration_graphs[1,i_mu].set_title('mu = '+str(mu[i_mu]),fontsize=10)
				integration_graphs[1,i_mu].set_xlabel('time t(s)')
				integration_graphs[1,i_mu].set_ylabel('m3/s')
				f_vx.close()


			else:
				print('File ',profil_vx_input,' does not exists')			
			
	plt.show()
